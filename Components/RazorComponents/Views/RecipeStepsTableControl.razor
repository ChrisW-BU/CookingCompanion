@inherits TableControlBase
@inject CookCompAPI _api

<table class="table table-striped table-hover">
    <thead>
        <tr>
            <td><b>Step</b></td>
            <td><b>Title</b></td>
            <td><b>Description</b></td>
            <td><b>Timer</b></td>
            <td><b>Previous Step</b></td>
            <td><b>Image URL</b></td>
            <td></td>
        </tr>
    </thead>
    <tbody>
        @foreach (RecipeStep r in TableData)
        {
            <tr @onclick="(args)=> SelectStep(args, r.Id)">
                <td>
                    @r.StepNumber
                </td>
                <td>
                    @r.Title
                </td>
                <td style="width: 25%">
                    @r.Description
                </td>
                <td>
                    @r.TimerDuration.ToString()
                </td>
                <td style="width: 25%">
                    @r.PreviousStep
                </td>
                <td>
                    @r.ImgUrl
                </td>
                <td>
                    <DeleteButtonControl OnClickCall="@(e => Delete(r.Id))" />
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    // Test
    [Parameter]
    public int RecipeId { get; set; }

    [Parameter]
    public EventCallback<int> RowClick { get; set; }

    private async Task SelectStep(MouseEventArgs e, int id)
    {
        await RowClick.InvokeAsync(id);
    }

    [Parameter]
    public List<RecipeStep> TableData { get; set; } = new();

    private async Task GetRecipeSteps()
    {
        try
        {
            TableData = await _api.GetRecipeStepListAsync(RecipeId);
            TableData = TableData.OrderBy(e => e.StepNumber).ToList();
        }
        catch
        {

        }

    }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
        //return base.OnInitializedAsync();
    }

    public async Task Refresh()
    {
        await GetRecipeSteps();
        StateHasChanged();
    }

    private async Task Delete(int stepId)
    {
        try
        {
            await _api.DeleteRecipeStepAsync(stepId);
            await Refresh();
        }
        catch
        {

        }
    }
}
