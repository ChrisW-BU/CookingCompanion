<div class="toast-container p-3 position-fixed top-0 end-0 @showClass" data-bs-delay="3000" data-bs-autohide="true" data-bs-animation="true">
    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">@HeaderText @BodyText</strong>
            <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
        </div>
        @* <div class="toast-body">
            @BodyText
        </div> *@
    </div>

    @* <div class="toast" id="errorToast" name="errorToast" role="alert" data-bs-delay="2000" data-bs-autohide="true" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">Bootstrap</strong>
            <small>11 mins ago</small>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            Hello, world! This is a toast message.
        </div>
    </div> *@
</div>

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public string? HeaderText { get; set; }

    [Parameter]
    public string? BodyText { get; set; }

    public string showClass {
        get {
            if(IsVisible) {
                return "d-block";
            }
            else {
                return "d-none";
            }
        }
    }

    public void Show(string bodyText, string headerText = "")
    {
        HeaderText = headerText;
        BodyText = bodyText;
        IsVisible = true;
        StateHasChanged();
    }

    private void Close()
    {
        HeaderText = string.Empty;
        BodyText = string.Empty;
        IsVisible = false;
        StateHasChanged();
    }
}
