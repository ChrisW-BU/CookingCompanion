@page "/recipes"
@inject CookCompAPI _api
@inject UserGlobal _user
@inject PageHistory _page
@inject NavigationManager _nav
@implements IDisposable
@using System.Timers

<PageTitle>CC - Select a recipe</PageTitle>
<PageBase>
    <h3>Recipes</h3>

    <AlertItem Style="AlertItem.AlertStyle.Warning">
        Please select a recipe from the list below to begin cooking. You can use the search box to find recipes faster, however,
        for the purpose of this prototype we have only included a couple of recipes; it should be enough to demonstrate the functionality.
    </AlertItem>

    <FormBase>
        <input class="form-control mb-4" placeholder="Search for recipe..." type="text" @bind=bindString @bind:event="oninput" @onkeyup="@ResetTimer" />
    </FormBase>

    <div class="grid gap-3">
        @foreach (var r in recipes)
        {
            <RecipeCard Id="r.Id" UserId="_user.Id" Name="@r.Name" Description="@r.Description" ImgUrl="@r.ImgUrl"
                        Duration="@r.Duration" IsVege="@r.IsVege" OnClickCall="() => OnClickEvent(r.Id)" IsVegan="@r.IsVegan"/>
        }
    </div>
    <ButtonContainer>
        <BackButtonControl OnClickCall="PageBack" />
    </ButtonContainer>

</PageBase>


@code {
    protected List<Recipe> recipes = new();
    public string bindString { get; set; } = string.Empty;
    public string submitString { get; set; } = string.Empty;
    private Timer searchTimer = default!;

    protected override async Task OnInitializedAsync()
    {
        recipes = await _api.GetRecipeListAsync(10, 0);

        searchTimer = new Timer(500);
        searchTimer.Elapsed += FinishedTyping;
        searchTimer.AutoReset = false;

        await base.OnInitializedAsync();
    }

    public void ResetTimer(KeyboardEventArgs e)
    {
        searchTimer.Stop();
        searchTimer.Start();
    }

    void IDisposable.Dispose() => searchTimer?.Dispose();

    private async void FinishedTyping(Object? source, ElapsedEventArgs e)
    {
        submitString = await Task.FromResult(bindString);
        _api.Output(submitString);
        await SearchForRecipe();
    }

    private async Task SearchForRecipe()
    {
        recipes = await _api.GetRecipeBySearchAsync(submitString);
        await InvokeAsync(StateHasChanged);
    }

    private void OnClickEvent(int recipeId)
    {
        _nav.NavigateTo("/recipes/view_recipe/" + recipeId);
        _page.AddPage("recipes");
    }

    private void PageBack()
    {
        if (_page.IsPrevious())
        {
            _api.ClearCacheAsync();
            _nav.NavigateTo(_page.GetPreviousPage());
        }
        else
        {
            _nav.NavigateTo("/");
        }
    }
}
