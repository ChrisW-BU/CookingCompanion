@page "/recipes/view_recipe/{CatchId}"
@inject CookCompAPI _api
@inject NavigationManager _nav
@inject UserGlobal _user
@inject PageHistory _page

<PageTitle>@PageTitleName</PageTitle>
<PageBase>
    <h3>@TitleName</h3>
    <FormBase>
        <div class="row mb-3">
            <div class="row p-3 col-lg-6 col-sm-0">
                <div class="col-4"><img width="250px" src="@RecipeObj.ImgUrl" class="img-fluid rounded-start" /></div>
                <div class="col-8">
                    <div class="">@RecipeObj.Description</div>
                </div>
                <div class="grid gap-3 text-center">
                    <div class="g-col-4 p-2"><i class="far fa-clock"></i>&nbsp @RecipeObj.Duration mins</div>
                    <VegetarianIcon IsVege="@RecipeObj.IsVege" IncludeStr=true />
                    <FavouriteStarIcon IsInteractive=true IsFavourite="@FavObj.IsFavourite" OnClickCall="FavouriteClicked" IncludeStr=true />
                </div>
            </div>

            <div class="col-lg-6 col-sm-0">
                <div class="w-shopping-list">
                    <div class="position-relative">
                        <div class=""><u>Ingredient List</u></div>
                        <div class="position-absolute top-0 end-0"><ShoppingPinIcon IsPinned="ShopObj.IsPinned" OnClickCallback="PinClicked" ColSize="12" /></div>
                    </div>
                    <br />
                    <div>
                        <ul>
                            @foreach (RecipeIngredient r in IngredientsObj)
                            {
                                <li>@r.IngredientName<div style="font-size:10px;">@r.Quantity @r.MeasurementName</div></li>
                            }
                        </ul>
                        @if (ShopObj.IsPinned)
                        {
                            <a href="" @onclick="GoToShoppingListPage">Go to shopping lists</a>
                        }
                    </div>

                </div>
            </div>

        </div>
        <p>
            <b>Page Notes:</b> If you haven't attempted this recipe before please select <i>"Start Cooking!"</i>. If you have attempted this recipe before you can
            <i>"Resume Cooking"</i> or <i>"Restart Recipe"</i>.'<br />

        </p>
        @* if this recipe/user ID combination has a record already, be "resume recipe" and add another button for restart recipe *@

    </FormBase>
    <ButtonContainer>
        @if (PageLoaded)
        {
            if (RecipeStarted)
            {
                <BackButtonControl OnClickCall="PageBack" />
                <ButtonControl Colour="success" Name="Resume Cooking" Icon="fas fa-circle-play" OnBaseClickCall="GoToCookingPage" />
                <ButtonControl Colour="danger" Name="Restart Recipe" Icon="fas fa-rotate" OnBaseClickCall="RestartRecipe" />
            }
            else
            {
                <BackButtonControl OnClickCall="PageBack" />
                <ButtonControl Colour="warning" Name="Start Cooking!" Icon="fas fa-utensils" OnBaseClickCall="GoToCookingPage" />
            }
        }
    </ButtonContainer>
</PageBase>
<Modal @ref="modalRef" />

@code {
    [Parameter]
    public string CatchId { get; set; } = string.Empty;

    [Parameter]
    public int RecipeId { get; set; }

    private bool PageLoaded { get; set; } = false;

    private bool RecipeStarted { get; set; } = false;

    public Recipe? RecipeObj { get; set; }

    public List<RecipeIngredient> IngredientsObj { get; set; }

    public Favourite? FavObj { get; set; }

    public ShoppingList ShopObj { get; set; }

    public string PageTitleName
    {
        get
        {
            if (RecipeObj.Id > 0)
            {
                return "CC - " + RecipeObj.Name;
            }
            else
            {
                return "Cooking Companion";
            }
        }
    }

    public string TitleName
    {
        get
        {
            if (RecipeObj.Id > 0)
            {
                return RecipeObj.Name;
            }
            else
            {
                return "Cooking Companion";
            }
        }
    }

    public async Task FavouriteClicked()
    {
        if (FavObj != null && FavObj.Id > 0)
        {
            await _api.DeleteFavouriteAsync(FavObj.Id);
            FavObj = new();
        }
        else
        {
            FavObj = new();
            FavObj.RecipeId = RecipeId;
            FavObj.UserId = _user.Id;
            FavObj.IsFavourite = true;
            FavObj = await _api.SaveFavouriteAsync(FavObj);
        }

        StateHasChanged();
    }

    public async Task PinClicked()
    {
        if (ShopObj != null && ShopObj.Id > 0)
        {
            await _api.DeleteShoppingListAsync(ShopObj.Id);
            ShopObj = new();
        }
        else
        {
            if (RecipeObj != null && RecipeObj.Id > 0)
            {
                if(!await _api.IsShoppingListLimit(_user.Id))
                {
                    ShopObj = new();
                    ShopObj.UserId = _user.Id;
                    ShopObj.RecipeId = RecipeId;
                    ShopObj.Name = RecipeObj.Name;
                    ShopObj.IsPinned = true;
                    ShopObj = await _api.SaveShoppingListAsync(ShopObj);
                }
                else
                {
                    // Pop-up
                    ErrorMessage();
                }
            }
        }

        StateHasChanged();
    }

    // Finds all CookingSteps tied to this recipe/user and deletes them all.
    public async Task RestartRecipe()
    {
        await _api.RestartCookingRecipe(RecipeId, _user.Id);
        GoToCookingPage();
    }

    protected async override Task OnParametersSetAsync()
    {
        int recId = Int32.Parse(CatchId);
        if (recId > 0)
        {
            RecipeId = recId;
            RecipeObj = await _api.GetRecipeUniqueAsync(RecipeId);
            IngredientsObj = await _api.GetRecipeIngredientListAsync(RecipeId);
            FavObj = await _api.CheckIsFavourite(RecipeId, _user.Id);
            ShopObj = await _api.CheckIsPinned(RecipeId, _user.Id);
        }
        else
        {
            RecipeObj = new();
            IngredientsObj = new();
        }

        if (IngredientsObj.Count > 0)
        {
            Ingredient? IngObj = new();
            MeasurementType? MesObj = new();
            foreach (RecipeIngredient r in IngredientsObj)
            {
                try
                {
                    IngObj = await _api.GetIngredientUniqueAsync(r.IngredientId);
                    if (IngObj != null)
                    {
                        r.IngredientName = IngObj.Name ?? "";
                    }

                    MesObj = await _api.GetMeasurementTypeUniqueAsync(r.MeasurementTypeId);
                    if (MesObj != null)
                    {
                        r.MeasurementName = MesObj.Name ?? "";
                    }

                }
                catch
                {

                }
            }
        }

        RecipeStarted = await _api.CheckRecipeStarted(RecipeId, _user.Id);

        PageLoaded = true;

        await base.OnParametersSetAsync();
    }

    

    private void Refresh()
    {
        _api.ClearCacheAsync();
        _nav.NavigateTo("/recipes/view_recipe/" + RecipeId);
    }

    private void GoToCookingPage()
    {
        _page.AddPage("recipes/view_recipe/" + RecipeId);
        _api.ClearCacheAsync();
        _nav.NavigateTo("/recipes/cooking/" + RecipeId);
    }

    private void GoToShoppingListPage()
    {
        _page.AddPage("recipes/view_recipe/" + RecipeId);
        _api.ClearCacheAsync();
        _nav.NavigateTo("/shoppinglist");
    }

    private void PageBack()
    {
        if (_page.IsPrevious())
        {
            _api.ClearCacheAsync();
            _nav.NavigateTo(_page.GetPreviousPage());
        }
        else
        {
            _nav.NavigateTo("/recipes/");
        }
    }

    private Modal modalRef;

    private void ErrorMessage()
    {
        // Shows the popup at the center of the screen
        modalRef.Show("You can only add a maximum of 3 shopping lists.");
    }
}
