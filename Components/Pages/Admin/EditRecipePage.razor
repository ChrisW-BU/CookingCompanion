@page "/admin/edit_recipe/{CatchId}"
@inject CookCompAPI _api
@inject NavigationManager _nav
@inject PageHistory _page

<PageTitle>@PageTitleName</PageTitle>
    <PageBase>
        <h3>@TitleName</h3>

    <FormBase>
        <FormInputText Name="Name" @bind-Value="RecipeObj.Name" AutoComplete=false FieldWidth="4" />
        <FormInputText Name="Image URL" @bind-Value="RecipeObj.ImgUrl" AutoComplete=false FieldWidth="4" />
        <FormInputText Name="Duration" @bind-Value="RecipeObj.Duration" AutoComplete=false FieldWidth="4" />
        <FormInputTextArea Name="Description" @bind-Value="RecipeObj.Description" AutoComplete=false FieldWidth="12" />
        <FormCheckbox Name="Is Vegetarian" @bind-Value="RecipeObj.IsVege" FieldWidth="12" />
    </FormBase>
    <div class="btn-group mt-4">
        <SaveButtonControl OnClickCall="Save" />
        <DeleteButtonControl OnClickCall="Delete" />
        <BackButtonControl OnClickCall="PageBack" />
    </div>
</PageBase>

<PageBase>
    <br />
    <br />
    <h3>Add/Edit Ingredients</h3>

    <RecipeIngredientTableControl @ref="_ingTable" RecipeId="@RecipeObj.Id" />

    <FormBase>
        <IngredientSelectControl Name="Select Ingredient" @bind-Value="ReIngObj.IngredientId" FieldWidth="4" />
        <MeasureSelectControl Name="Select Measurement Type" @bind-Value="ReIngObj.MeasurementTypeId" FieldWidth="4" />
        <NumberControl Name="Quantity" @bind-Value="ReIngObj.Quantity" FieldWidth="4" />
    </FormBase>
    <div class="btn-group mt-4">
        <AddNewButtonControl Name="Add Ingredient" OnClickCall="AddIngredient" />
        <BackButtonControl OnClickCall="PageBack" />
    </div>
</PageBase>

<PageBase>
    <br />
    <br />
    <h3>Add/Edit Steps</h3>
    <RecipeStepsTableControl @ref="_stepsTable" RecipeId="@RecipeObj.Id" />

    <FormBase>
        <NumberControl Name="Step Number" @bind-Value="ReStepObj.StepNumber" FieldWidth="4" />
        <FormInputText Name="Title" @bind-Value="ReStepObj.Title" AutoComplete=false FieldWidth="4" />
        <FormInputText Name="Image URL" @bind-Value="ReStepObj.ImgUrl" AutoComplete=false FieldWidth="4" />
        <FormInputTextArea Name="Description" @bind-Value="ReStepObj.Description" AutoComplete=false FieldWidth="12" />
    </FormBase>

    <div class="btn-group mt-4">
        <AddNewButtonControl Name="Add Step" OnClickCall="AddStep" />
        <BackButtonControl OnClickCall="PageBack" />
    </div>
</PageBase>

@code {
    [Parameter]
    public string CatchId { get; set; } = string.Empty;

    private RecipeIngredientTableControl _ingTable;

    private RecipeStepsTableControl _stepsTable;

    [Parameter]
    public int RecipeId { get; set; }

    public Recipe? RecipeObj { get; set; }

    [Parameter]
    public RecipeIngredient? ReIngObj { get; set; }

    [Parameter]
    public RecipeStep? ReStepObj { get; set; }

    //public List<RecipeIngredient> IngredientList = new List<RecipeIngredient>();

    public List<RecipeStep> StepsList = new List<RecipeStep>();

    public string PageTitleName
    {
        get
        {
            if (RecipeObj.Id > 0)
            {
                return "CC - " + RecipeObj.Name;
            }
            else
            {
                return "CC - New Recipe";
            }
        }
    }

    public string TitleName
    {
        get
        {
            if (RecipeObj.Id > 0)
            {
                return "Edit Recipe";
            }
            else
            {
                return "Add New Recipe";
            }
        }
    }

    protected async override Task OnParametersSetAsync()
    {
        int ingId = Int32.Parse(CatchId);
        if (ingId > 0)
        {
            RecipeObj = await _api.GetRecipeUniqueAsync(ingId);
        }
        else
        {
            RecipeObj = new Recipe();
        }

        ReIngObj = new();
        ReStepObj = new();

        await base.OnParametersSetAsync();
    }

    private async Task Save()
    {
        try
        {
            RecipeObj.LastModified = DateTime.Now;
            await _api.SaveRecipeAsync(RecipeObj);
            PageBack();
        }
        catch { }
    }

    private async Task Delete()
    {
        try
        {
            await _api.DeleteRecipeAsync(RecipeObj.Id);
            PageBack();
        }
        catch
        {

        }
    }

    private void PageBack()
    {
        if (_page.IsPrevious())
        {
            _api.ClearCacheAsync();
            _nav.NavigateTo(_page.GetPreviousPage());
        }
    }




    private async Task AddIngredient()
    {
        try
        {
            if (RecipeObj.Id > 0)
            //if (ReIngObj.IngredientId > 0 && RecipeObj.Id > 0)
            {
                ReIngObj.RecipeId = RecipeObj.Id;
                await _api.SaveRecipeIngredientAsync(ReIngObj);
                ReIngObj = new();
                await _ingTable.Refresh();
            }
        }
        catch { }
    }

    private async Task AddStep()
    {
        try
        {
            if (RecipeObj.Id > 0)
            {
                ReStepObj.RecipeId = RecipeObj.Id;
                await _api.SaveRecipeStepAsync(ReStepObj);
                ReStepObj = new();
                await _stepsTable.Refresh();
            }
        }
        catch { }
    }
}
