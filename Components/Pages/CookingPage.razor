@page "/recipes/cooking/{CatchId}"
@inject CookCompAPI _api
@inject NavigationManager _nav
@inject UserGlobal _user
@inject PageHistory _page

<PageTitle>@PageTitleName</PageTitle>
<PageBase>
    <h3>@TitleName</h3>
    <FormBase>
        @if (!IsLoading)
        {
            <div>@Title</div>
            <div>@Description</div>
        }
        else
        {
            <div>Content is loading...</div>
        }
    </FormBase>
    <div class="btn-group-sm btn-group-vertical mt-4">
        <CookingRecipeButton OnClickCall="PageBack"/>
        <PreviousStepButton OnClickCall="PreviousStep"/>
        <NextStepButton OnClickCall="NextStep"/>
    </div>
</PageBase>

@code {
    [Parameter]
    public string CatchId { get; set; } = string.Empty;

    [Parameter]
    public int RecipeId { get; set; }

    private bool IsLoading { get; set; } = true;

    private Recipe? RecipeObj { get; set; }

    private List<CookingStep> StepList { get; set; }

    private RecipeStep? RStepObj { get; set; }

    private CookingStep? CStepObj { get; set; }

    private string Title { get; set; } = string.Empty;

    private string Description { get; set; } = string.Empty;

    protected async override Task OnParametersSetAsync()
    {
        int recId = Int32.Parse(CatchId);
        if (recId > 0)
        {
            RecipeId = recId;
            RecipeObj = await _api.GetRecipeUniqueAsync(RecipeId);
            StepList = await _api.CheckCookingStatus(RecipeId, _user.Id);

            foreach (CookingStep cs in StepList)
            {
                if (!cs.IsCompleted)
                {
                    CStepObj = cs;
                    RStepObj = await _api.GetRecipeStepUniqueAsync(cs.StepId);

                    Title = RStepObj.Title;
                    Description = RStepObj.Description;

                    break;
                }
            }

            //System.Diagnostics.Debug.WriteLine("C Step: " + cStepObj.StepNumber);
            //System.Diagnostics.Debug.WriteLine("R Step: " + rStepObj.Title);

            IsLoading = false;
        }
        else
        {
            RecipeObj = new();
        }

        await base.OnParametersSetAsync();
    }

    private async void PreviousStep()
    {
        if (StepList != null && CStepObj != null && (CStepObj.StepNumber > 1))
        {
            CStepObj = StepList.Find(x => x.StepNumber == CStepObj.StepNumber - 1);
            await UpdateRecipeStep();
            StateHasChanged();
        }
    }

    private async void NextStep()
    {
        if(StepList != null && CStepObj != null && (CStepObj.StepNumber +1 <= StepList.Count))
        {
            CStepObj = StepList.Find(x => x.StepNumber == CStepObj.StepNumber + 1);
            await UpdateRecipeStep();
            StateHasChanged();
        }
    }

    private async Task UpdateRecipeStep()
    {
        RStepObj = await _api.GetRecipeStepUniqueAsync(CStepObj.StepId);
        Title = RStepObj.Title;
        Description = RStepObj.Description;
    }

    public string PageTitleName
    {
        get
        {
            if (RecipeObj.Id > 0)
            {
                return "CC - Cooking " + RecipeObj.Name;
            }
            else
            {
                return "Cooking Companion";
            }
        }
    }

    public string TitleName
    {
        get
        {
            if (RecipeObj.Id > 0)
            {
                return "Cooking " + RecipeObj.Name;
            }
            else
            {
                return "Cooking Companion";
            }
        }
    }


    private void PageBack()
    {
        if (_page.IsPrevious())
        {
            _api.ClearCacheAsync();
            _nav.NavigateTo(_page.GetPreviousPage());
        }
    }
}
