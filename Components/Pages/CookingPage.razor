@page "/recipes/cooking/{CatchId}"
@inject CookCompAPI _api
@inject NavigationManager _nav
@inject UserGlobal _user
@inject PageHistory _page

<PageTitle>@PageTitleName</PageTitle>
<PageBase>
    @* <h5>@TitleName</h5> *@
    <FormBase>
        @if (!IsLoading)
        {
            @* This layout is for smaller screens *@
            <div class="container d-grid d-lg-none">
                <div class="col-12 row">

                    @* Step header *@
                    @* Landscape *@
                    <div class="col-6 d-none d-sm-block" style="float:left">
                        <img src="@RecipeObj.ImgUrl" class="img-fluid rounded-start" style="float:left; margin-right: 4px; max-width:40%;" />
                        <h6>@TitleName</h6>
                        Step: @RStepObj.StepNumber
                    </div>
                    <div class="col-6 d-none d-sm-block" style="float:right;">
                        <div class="w-shopping-list" style=" background-color:antiquewhite;">
                            <i style="font-size:30px; color:gray; float:right; margin-left: 4px;" class="fas fa-history"></i>
                            <div style="font-size:12px;"><b>@RStepObj.PreviousStep</b></div>
                        </div>
                    </div>

                    @* Portrait *@
                    <div class="col-4 d-block d-sm-none" style="float:left">
                        <img src="@RecipeObj.ImgUrl" class="img-fluid rounded-start" style="float:left; margin-right: 4px;" />
                        <h6>@TitleName</h6>
                        Step: @RStepObj.StepNumber
                    </div>
                    <div class="col-8 d-block d-sm-none" style="float:right;">
                        <div class="w-shopping-list" style=" background-color:antiquewhite;">
                            <i style="font-size:30px; color:gray; float:right; margin-left: 4px;" class="fas fa-history"></i>
                            <div style="font-size:12px;"><b>@RStepObj.PreviousStep</b></div>
                        </div>
                    </div>
                </div>

                @* Step Instructions *@
                <div class="col-12 row pt-4">
                    <div class="col-8">
                        <h5>@Title</h5>
                        <div>@Description</div>
                    </div>
                    <div class="col-4">
                        <img width="200px" src="@RecipeObj.ImgUrl" class="img-fluid rounded-start" />
                    </div>
                </div>
            </div>

            @* This layout is for larger screens *@
            <div class="container p-5 d-none d-lg-grid">
                <div class="col-12 row">
                    <div class="col-6" style="float:left">
                        <img src="@RecipeObj.ImgUrl" class="img-fluid rounded-start" style="float:left; margin-right: 4px; max-width:35%;" />
                        <h6 style="font-size:30px">@TitleName</h6>
                        <p style="font-size:25px">Step: @RStepObj.StepNumber</p>
                    </div>

                    <div class="col-6 p-4" style="float:right;">
                        <div class=" w-shopping-list" style="background-color:antiquewhite">
                            <i style="font-size:40px; color:gray; float:right; margin-left: 4px;" class="fas fa-history"></i>
                            <div style="font-size:22px;"><b>@RStepObj.PreviousStep</b></div>
                        </div>
                    </div>
                </div>
                <br />
                <div class="col-12 pt-4"><div><h5 style="font-size:30px">@Title</h5></div></div>
                <div class="col-12 row">
                    <div class="col-8" style="font-size:30px">
                        <div>@Description</div>
                    </div>
                    <div class="col-4">
                        <img width="200px" src="@RecipeObj.ImgUrl" class="img-fluid rounded-start" />
                    </div>
                </div>
            </div>

        }
        else
        {
            <div>Content is loading...</div>
        }
    </FormBase>

    @* Made an adaptation of the ButtonContainer, as it wasn't ordering the buttons as preferred. *@
    <div class="d-none d-sm-grid">
        <div class="btn-group mt-4">
            <PreviousStepButton OnClickCall="PreviousStep" />
            <CookingRecipeButton OnClickCall="PageBack" />
            <NextStepButton OnClickCall="NextStep" />
        </div>
    </div>
    <div class="d-grid d-sm-none">
        <div class="btn-group-vertical mt-4">
            <NextStepButton OnClickCall="NextStep" />
            <PreviousStepButton OnClickCall="PreviousStep" />
            <CookingRecipeButton OnClickCall="PageBack" />
        </div>
    </div>

</PageBase>

@code {
    [Parameter]
    public string CatchId { get; set; } = string.Empty;

    [Parameter]
    public int RecipeId { get; set; }

    private bool IsLoading { get; set; } = true;

    private Recipe? RecipeObj { get; set; }

    private List<CookingStep> StepList { get; set; }

    private RecipeStep? RStepObj { get; set; }

    private CookingStep? CStepObj { get; set; }

    private string Title { get; set; } = string.Empty;

    private string Description { get; set; } = string.Empty;

    protected async override Task OnParametersSetAsync()
    {
        int recId = Int32.Parse(CatchId);
        if (recId > 0)
        {
            RecipeId = recId;
            RecipeObj = await _api.GetRecipeUniqueAsync(RecipeId);
            StepList = await _api.CheckCookingStatus(RecipeId, _user.Id);

            foreach (CookingStep cs in StepList)
            {
                if (!cs.IsCompleted)
                {
                    CStepObj = cs;
                    RStepObj = await _api.GetRecipeStepUniqueAsync(cs.StepId);

                    Title = RStepObj.Title;
                    Description = RStepObj.Description;

                    break;
                }
            }

            //System.Diagnostics.Debug.WriteLine("C Step: " + cStepObj.StepNumber);
            //System.Diagnostics.Debug.WriteLine("R Step: " + rStepObj.Title);

            IsLoading = false;
        }
        else
        {
            RecipeObj = new();
        }

        await base.OnParametersSetAsync();
    }

    private async void PreviousStep()
    {
        if (StepList != null && CStepObj != null && (CStepObj.StepNumber > 1))
        {
            CStepObj = StepList.Find(x => x.StepNumber == CStepObj.StepNumber - 1);
            await UpdateRecipeStep();
            StateHasChanged();
        }
    }

    private async void NextStep()
    {
        if (StepList != null && CStepObj != null && (CStepObj.StepNumber + 1 <= StepList.Count))
        {
            CStepObj = StepList.Find(x => x.StepNumber == CStepObj.StepNumber + 1);
            await UpdateRecipeStep();
            StateHasChanged();
        }
    }

    private async Task UpdateRecipeStep()
    {
        RStepObj = await _api.GetRecipeStepUniqueAsync(CStepObj.StepId);
        Title = RStepObj.Title;
        Description = RStepObj.Description;
    }

    public string PageTitleName
    {
        get
        {
            if (RecipeObj.Id > 0)
            {
                return "CC - Cooking " + RecipeObj.Name;
            }
            else
            {
                return "Cooking Companion";
            }
        }
    }

    public string TitleName
    {
        get
        {
            if (RecipeObj.Id > 0)
            {
                return RecipeObj.Name;
            }
            else
            {
                return "Cooking Companion";
            }
        }
    }


    private void PageBack()
    {
        if (_page.IsPrevious())
        {
            _api.ClearCacheAsync();
            _nav.NavigateTo(_page.GetPreviousPage());
        }
    }
}
