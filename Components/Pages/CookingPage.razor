@page "/recipes/cooking/{CatchId}"
@inject CookCompAPI _api
@inject NavigationManager _nav
@inject UserGlobal _user
@inject PageHistory _page
@inject IJSRuntime JSRuntime

@if (_user.GetTaskComplete())
{
<PageTitle>@PageTitleName</PageTitle>
<PageBase>
    @* <h5>@TitleName</h5> *@
    <FormBase>
        @if (!IsLoading)
        {
            @* This layout is for smaller screens *@
            <div class="container d-grid d-lg-none">
                <div class="col-12 row">

                    @* Step header *@
                    @* Landscape *@
                    <div class="col-6 d-none d-sm-block" style="float:left">
                        <img src="@RecipeObj.ImgUrl" class="img-fluid rounded-start" style="float:left; margin-right: 4px; max-width:40%;" />
                        <h6>@TitleName</h6>
                        Step: @RStepObj.StepNumber
                    </div>
                    <div class="col-6 d-none d-sm-block" style="float:right;">
                        <div class="w-shopping-list" style=" background-color:antiquewhite;">
                            <i style="font-size:30px; color:gray; float:right; margin-left: 4px;" class="fas fa-history"></i>
                            <div style="font-size:12px;"><b>@RStepObj.PreviousStep</b></div>
                        </div>
                    </div>

                    @* Portrait *@
                    <div class="col-4 d-block d-sm-none" style="float:left">
                            <img src="@RecipeObj.ImgUrl" class="img-fluid rounded-start" style="float:left; margin-right: 4px;" />
                        <h6>@TitleName</h6>
                            Step: @RStepObj.StepNumber
                    </div>
                    <div class="col-8 d-block d-sm-none" style="float:right;">
                        <div class="w-shopping-list" style=" background-color:antiquewhite;">
                            <i style="font-size:30px; color:gray; float:right; margin-left: 4px;" class="fas fa-history"></i>
                            <div style="font-size:12px;"><b>@RStepObj.PreviousStep</b></div>
                        </div>
                    </div>
                </div>

                @* Step Instructions *@
                <div class="col-12 row pt-4">
                    <div class="col-8">
                        <h5>@Title</h5>
                        <div>@Description</div>
                    </div>
                    <div class="col-4">
                        <img width="200px" src="@RStepObj.ImgUrl" class="img-fluid rounded-start" />
                    </div>
                </div>
            </div>

            @* This layout is for larger screens *@
            <div class="container d-none d-lg-grid">
                <div class="col-12 row">
                    <div class="col-6" style="float:left">
                            <img src="@RecipeObj.ImgUrl" class="img-fluid rounded-start" style="float:left; margin-right: 4px; max-width:35%;" />
                        <h6 style="font-size:25px">@TitleName</h6>
                        <p style="font-size:20px">Step: @RStepObj.StepNumber</p>
                    </div>

                    <div class="col-6 p-4" style="float:right;">
                        <div class=" w-shopping-list" style="background-color:antiquewhite">
                            <i style="font-size:36px; color:grey; float:right; margin-left: 4px;" class="fas fa-history"></i>
                            <div style="font-size:18px;">@RStepObj.PreviousStep</div>
                        </div>
                    </div>
                </div>
                <br />
                <div class="col-12 pt-4"><div><h5 style="font-size:25px">@Title</h5></div></div>
                <div class="col-12 row">
                    <div class="col-8" style="font-size:22px">
                        <div>@Description</div>
                    </div>
                    <div class="col-4">
                            <img width="200px" src="@RStepObj.ImgUrl" class="img-fluid rounded-start" />
                    </div>
                </div>
            </div>

        }
        else
        {
            <div>Content is loading...</div>
        }
        @if (RStepObj.HasTimer)
        {
            UpdateTimerButton(false);
        }
        else
        {
            UpdateTimerButton(true);
        }

    </FormBase>
    <div hidden="@IsHidden"><button class="timer-button" @onclick="(() => StartTimer())">
        <i class="fas fa-clock pt-1 timer-icon"></i>Start Timer</button></div>
    
    @* Made an adaptation of the ButtonContainer, as it wasn't ordering the buttons as preferred. *@
    <div class="d-none d-sm-grid">
        <div class="btn-group mt-4">
            <PreviousStepButton OnClickCall="PreviousStep" />
            <CookingRecipeButton OnClickCall="PageBack" />
                <ButtonControl Name="Next Step!" Colour="success" OnBaseClickCall="NextStep"
                               Icon="fas fa-circle-arrow-right" IsHidden=@NextIsHidden />
        </div>
    </div>
    <div class="d-grid d-sm-none">
        <div class="btn-group-vertical mt-4">
                <ButtonControl Name="Next Step!" Colour="success" OnBaseClickCall="NextStep"
                               Icon="fas fa-circle-arrow-right" IsHidden=@NextIsHidden />
            <PreviousStepButton OnClickCall="PreviousStep" />
            <CookingRecipeButton OnClickCall="PageBack" />
        </div>
    </div>
</PageBase>

<ClockTimer @ref=ourClock></ClockTimer>
}

@code {
    public ClockTimer ourClock = new();
    public NextStepButton NextButton = new();

    [CascadingParameter]
    protected MainLayout parent { get; set; }

    [Parameter]
    public string CatchId { get; set; } = string.Empty;

    [Parameter]
    public int RecipeId { get; set; }

    public bool IsHidden { get; set; } =  true;
    public bool NextIsHidden { get; set; } = false;

    private bool IsLoading { get; set; } = true;

    private Recipe? RecipeObj { get; set; } = new();

    private List<CookingStep> StepList { get; set; }

    private RecipeStep? RStepObj { get; set; } = new();

    private CookingStep? CStepObj { get; set; } = new();

    private string Title { get; set; } = string.Empty;

    private string Description { get; set; } = string.Empty;

    protected async override Task OnParametersSetAsync()
    {
        int recId = Int32.Parse(CatchId);
        if (recId > 0)
        {
            RecipeId = recId;
            RecipeObj = await _api.GetRecipeUniqueAsync(RecipeId);
            StepList = await _api.CheckCookingStatus(RecipeId, _user.Id);
            StepList = StepList.OrderBy(b => b.StepNumber).ToList();
            foreach (CookingStep cs in StepList)
            {
                if (!cs.IsCompleted)
                {
                    CStepObj = cs;
                    RStepObj = await _api.GetRecipeStepUniqueAsync(cs.StepId);

                    Title = RStepObj.Title;
                    Description = RStepObj.Description;

                    break;
                }
            }

            IsLoading = false;
        }
        else
        {
            RecipeObj = new();
        }

        await base.OnParametersSetAsync();
    }

    private async void PreviousStep()
    {
        if (await CheckPreviousStepForTimer() && ourClock.IsRunning)
        {
            if (await JSRuntime.InvokeAsync<bool>(
                "confirm", $"You already have a timer running. Do you want to cancel the previous timer?"))
            {
                ourClock.StopClock();
                await _api.SaveManualLogEntry(
                    _user.Id, CStepObj.Id, CookCompAPI.UserLogs.EndedTimer, "CookingStep");
            }
        }

        if (await CheckPreviousStep())
        {
            CStepObj = StepList.Find(x => x.StepNumber == CStepObj.StepNumber - 1);
            await UpdateRecipeStep();
            StateHasChanged();
        }
    }

    private async void NextStep()
    {
        if (await CheckNextStepForTimer() && ourClock.IsRunning) {
            if (await JSRuntime.InvokeAsync<bool>(
                "confirm", $"You already have a timer running. Do you want to cancel the previous timer?"))
            {
                ourClock.StopClock();
                await _api.SaveManualLogEntry(
                    _user.Id, CStepObj.Id, CookCompAPI.UserLogs.EndedTimer, "CookingStep");
            }
        }
        if (await CheckNextStep())
        {
            CStepObj.IsCompleted = true;
            await SaveCookingStep();
            CStepObj = StepList.Find(x => x.StepNumber == CStepObj.StepNumber + 1);
            await UpdateRecipeStep();
            StateHasChanged();
        }
        else
        {
            NextButton.SetIsHidden(true);
            NextIsHidden = true;
            await _api.SaveManualLogEntry(
                _user.Id, 0, CookCompAPI.UserLogs.Error, "Step list not found, or cooking step object not found...");
        }
    }

    private async Task<bool> CheckNextStep()
    {
        if (StepList != null && CStepObj != null)
        {
            if (CStepObj.StepNumber + 1 <= StepList.Count)
            {
                return true;
            }
        }
        return false;
    }

    private async Task<bool> CheckPreviousStep()
    {
        if (StepList != null && CStepObj != null && (CStepObj.StepNumber > 1))
        {
            return true;
        }
        return false;
    }

    private async Task UpdateRecipeStep()
    {
        RStepObj = await _api.GetRecipeStepUniqueAsync(CStepObj.StepId);
        Title = RStepObj.Title;
        Description = RStepObj.Description;

        // This isn't working correctly in the render tree
        if(await CheckNextStep())
        {
            NextIsHidden = false;
        }
        else
        {
            NextIsHidden = true;
            NextButton.SetIsHidden(true);
            await _api.SaveManualLogEntry(
                _user.Id, CStepObj.Id, CookCompAPI.UserLogs.EndedRecipe, "CookingStep");
        }
        //StateHasChanged();
    }

    private async Task<bool> CheckNextStepForTimer()
    {
        if (await CheckNextStep())
        {
            var cookStep = StepList.Find(x => x.StepNumber == CStepObj.StepNumber + 1);
            var recStep = await _api.GetRecipeStepUniqueAsync(cookStep.StepId);

            if(recStep.HasTimer && ourClock.TimerStarted)
            {
                return true;
            }
        }
        return false;
    }

    private async Task<bool> CheckPreviousStepForTimer()
    {
        if (await CheckPreviousStep())
        {
            var cookStep = StepList.Find(x => x.StepNumber == CStepObj.StepNumber - 1);
            var recStep = await _api.GetRecipeStepUniqueAsync(cookStep.StepId);

            if (recStep.HasTimer && ourClock.TimerStarted)
            {
                return true;
            }
        }
        return false;
    }

    private async Task SaveCookingStep()
    {
        await _api.SaveCookingStepAsync(CStepObj);
    }

    public string PageTitleName
    {
        get
        {
            if (RecipeObj.Id > 0)
            {
                return "CC - Cooking " + RecipeObj.Name;
            }
            else
            {
                return "Cooking Companion";
            }
        }
    }

    public string TitleName
    {
        get
        {
            if (RecipeObj.Id > 0)
            {
                return RecipeObj.Name;
            }
            else
            {
                return "Cooking Companion";
            }
        }
    }


    private async void PageBack()
    {
        if (_page.IsPrevious())
        {
            _api.ClearCacheAsync();
            _nav.NavigateTo(_page.GetPreviousPage());
        }
        else
        {
            _nav.NavigateTo("/recipes/view_recipe/" + RecipeId);
        }
    }

    public async Task UpdateTimerButton(bool x)
    {
        if (IsHidden != x)
        {
            IsHidden = x;
            await AlterTimerButton();
        }
    }

    async Task AlterTimerButton()
    {
        await InvokeAsync(StateHasChanged);
    }

    public async Task StartTimer()
    {
        // We are starting the step here
        CStepObj.StepTimerStarted = DateTime.Now;
        await SaveCookingStep();
        await ourClock.StartTimer(RStepObj.TimerDuration, RStepObj.TimerString, RStepObj.ImgUrl);
        await _api.SaveManualLogEntry(
            _user.Id, CStepObj.Id, CookCompAPI.UserLogs.StartedTimer, "CookingStep");
    }

    // The following code is to manage page navigation. We want to limit what the user can do
    // when the app is in a scenario
    private IDisposable? locationReg;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            locationReg =
                _nav.RegisterLocationChangingHandler(OnLocationChanging);
        }
    }

    // We need control over where the user can go once the scenario has begun
    private async ValueTask OnLocationChanging(LocationChangingContext context)
    {
        // If it hasn't then it doesn't matter
        if (context.TargetLocation != "/recipes/cooking/" + CatchId)
        {
            if (await JSRuntime.InvokeAsync<bool>(
            "confirm", $"If you leave the recipe page now any timers will be cancelled. Is this OK?"))
            {
                Dispose();
            }
            else
            {
                context.PreventNavigation();
            }
        }
    }

    public void Dispose() => locationReg?.Dispose();
}
