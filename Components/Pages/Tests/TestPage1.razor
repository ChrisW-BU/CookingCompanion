@page "/03e7e140-a010-4062-82c0-1201e4961532"
@inject CookCompAPI _api
@inject NavigationManager _nav
@inject PageHistory _page
@inject UserGlobal _user
@implements IDisposable
@inject IJSRuntime JSRuntime;
@using System.Timers

<PageTitle>Cooking Companion - Task One</PageTitle>
<PageBase>
    <AlertItem Style="AlertItem.AlertStyle.Warning">
        <div style="font-size:24px;">
            <i class="fas fa-edit fa-fw"></i>
            <b>Task One</b>
        </div>
        <div style="font-size:20px;">
            Search for a recipe called "mushroom risotto" and add it to your favourites.
        </div>
    </AlertItem>

    @if (isLoading)
    {
        @* Init - Task description and start button *@
        <ButtonContainer>
            <BackButtonControl OnClickCall="GoToIndex"/>
            <ButtonControl Name="Start Task" OnBaseClickCall="StartTask" Icon="fas fa-play" Colour="success" />
        </ButtonContainer>
    }
    else
    {
        @* Task content goes here... *@
        <FormBase>
            <input class="form-control mb-4" placeholder="Search for recipe..." type="text" @bind=bindString @bind:event="oninput" @onkeyup="@ResetTimer" />
        </FormBase>
        <div hidden="@hideDivOne">
            No recipes found...
        </div>
        <div hidden="@hideDivTwo">
            @if (recipe?.Id > 0)
            {
                <RecipeCard Id="@recipe.Id" UserId="_user.Id" Name="@recipe.Name" Description="@recipe.Description" ImgUrl="@recipe.ImgUrl"
                            Duration="@recipe.Duration" IsVege="@recipe.IsVege"
                            CustomStyles="max-width: 250px;" OnFavouriteClick="() => ourModal.OpenModal()" />
            }

        </div>
        <ButtonContainer>
            <BackButtonControl OnClickCall="GoToIndex" />
            @* <ButtonControl Name="Complete Task" OnBaseClickCall="TaskCompleted" Icon="fas fa-check" Colour="success" /> *@
            <ButtonControl Name="Skip Task" OnBaseClickCall="FailTask" Icon="fas fa-circle-xmark" Colour="danger" />
        </ButtonContainer>
    }
    
</PageBase>
<ModalControl OnClickCall="ConfirmCompleted" HeadStr="Task One Completed" BodyStr="Please click 'Confirm' to progress to the next task." @ref="@ourModal" />

@code {
    ModalControl ourModal  { get; set; }

    // We check to see if user has a task record for this task
    protected override async Task OnInitializedAsync()
    {
        // If this task is already complete, navigate to next task
        if (await _api.CheckTaskStatus(taskId, _user.Id))
        {
            await NextTask();
        }
        else
        {
            // Get the taskObj for this user/taskId
            taskObj = await _api.GetActiveTask(taskId, _user.Id);

            recipe = await _api.GetRecipeUniqueAsync(1);

            await ResetTaskAsync();

            // Setup timer
            searchTimer = new Timer(500);
            searchTimer.Elapsed += FinishedTyping;
            searchTimer.AutoReset = false;
        }
        await base.OnInitializedAsync();
    }

    // Task logic
    public string bindString { get; set; } = string.Empty;
    public string submitString { get; set; } = string.Empty;
    private Timer searchTimer = default!;

    public void ResetTimer(KeyboardEventArgs e)
    {
        searchTimer.Stop();
        searchTimer.Start();
    }

    void IDisposable.Dispose() => searchTimer?.Dispose();

    private async void FinishedTyping(Object? source, ElapsedEventArgs e)
    {
        submitString = await Task.FromResult(bindString);

        if (submitString?.Length == 0 || !recipe.Name.ToLower().Contains(submitString.ToLower()))
        {
            hideDivOne = false;
            hideDivTwo = true;
        }
        else
        {
            hideDivOne = true;
            hideDivTwo = false;
        }
        await InvokeAsync(StateHasChanged);
    }

    private void ConfirmCompleted()
    {
        ourModal.CloseModal();
        TaskCompleted();
    }

    private bool hideDivOne { get; set; } = false;

    private bool hideDivTwo { get; set; } = true;

    private Recipe? recipe = new();

    // Page logic
    private bool isLoading { get; set; } = true;

    private bool taskStarted { get; set; } = false;

    private bool taskCompleted { get; set; } = false;

    protected int taskId = 1;

    private TaskObj? taskObj = new();

    protected string currentPage = "03e7e140-a010-4062-82c0-1201e4961532";

    protected string nextPage = "ac5c23b5-bf0c-4894-ae80-8b1226daa7b4";

    private async Task ResetTaskAsync()
    {
        if (taskObj.Id > 0)
        {
            if (!taskObj.TimeEnded.HasValue && !taskObj.TaskFailed)
            {
                taskObj.TimeStarted = null;
                taskObj.TimeEnded = null;
                taskObj.TaskFailed = false;
                await _api.SaveTaskAsync(taskObj);
            }
        }
    }

    private async void StartTask()
    {
        taskStarted = true;
        DateTime startTime = DateTime.Now;

        if(taskObj?.Id == 0) {
            // Create a new task record for this user id
            taskObj = new TaskObj
            {
                UserId = _user.Id,
                TaskId = taskId,
                TimeStarted = startTime
            };
        }
        else
        {
            taskObj.TimeStarted = startTime;
            taskObj.TimeEnded = null;
            taskObj.TaskFailed = false;
        }

        await _api.SaveTaskAsync(taskObj);
        isLoading = false;
        var dnRef = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("RPCC.clickListener", dnRef);
        StateHasChanged();
    }

    private async void FailTask()
    {
        if (taskObj.Id > 0)
        {
            if (await JSRuntime.InvokeAsync<bool>(
                "confirm", $"This task will fail and you will move to the next task automatically. Confirm?"))
            {
                taskObj.TaskFailed = true;
                await _api.SaveTaskAsync(taskObj);
            }
        }
    }

    private async Task NextTask()
    {
        Dispose();
        _nav.NavigateTo("/" + nextPage);
    }

    public async Task TaskCompleted()
    {
        taskObj.TimeEnded = DateTime.Now;
        taskObj.ClickCount = pageClicks;
        await _api.SaveTaskAsync(taskObj);
        taskCompleted = true;
        await NextTask();
    }

    // The following code is to manage page navigation. We want to limit what the user can do
    // when the app is in a scenario
    private IDisposable? locationReg;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            locationReg =
                _nav.RegisterLocationChangingHandler(OnLocationChanging);
        }
    }

    // We need control over where the user can go once the scenario has begun
    private async ValueTask OnLocationChanging(LocationChangingContext context)
    {
        if (context.TargetLocation == "/")
        {
            // we can go back to index regardless, so reset any timers on taskObj if req
            await ResetTaskAsync();
        }
        else
        {
            if (taskCompleted)
            {
                if(context.TargetLocation != "/" + nextPage)
                {
                    context.PreventNavigation();
                }
            }
            else // this is probably surplus to requirements
            {
                bool cancelChange = false;
                // We want to check if the task has begun yet
                if (taskStarted && !await ConfirmPageExit())
                {
                    cancelChange = true;
                }

                if (cancelChange)
                {
                    context.PreventNavigation();
                }
                else
                {
                    // If it hasn't then it doesn't matter
                    if (context.TargetLocation != "/" + currentPage)
                    {
                        context.PreventNavigation();
                    }
                }
            }
        }
        //return ValueTask.CompletedTask;
    }

    private async Task<bool> ConfirmPageExit()
    {
        if (await JSRuntime.InvokeAsync<bool>(
            "confirm", $"If you leave this page now the task will be reset. Is this OK?"))
        {
            return true;
        }
        return false;
    }

    private async void GoToIndex()
    {
        if (await JSRuntime.InvokeAsync<bool>(
            "confirm", $"If you leave this page now, the task will be reset. Is this OK?"))
        {
            _nav.NavigateTo("/");
        }
    }

    public void Dispose() => locationReg?.Dispose();

    // On Click Tracking
    @implements IAsyncDisposable
    private int pageClicks { get; set; }

    [JSInvokable]
    public void TriggerClick()
    {
        pageClicks++;
        //_api.Output("Task 1 Clicks: " + pageClicks);
    }

    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("RPCC.removeEventListener");
    }
}
