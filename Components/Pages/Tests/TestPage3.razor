@page "/823bce54-0cf9-40a0-9c5d-53921f743093"
@inject CookCompAPI _api
@inject NavigationManager _nav
@inject PageHistory _page
@inject UserGlobal _user
@implements IDisposable
@inject IJSRuntime JSRuntime;

<PageTitle>Cooking Companion - Task Three</PageTitle>
<PageBase>
    <AlertItem Style="AlertItem.AlertStyle.Warning">
        <div style="font-size:24px;">
            <i class="fas fa-edit fa-fw"></i>
            <b>Task Three</b>
        </div>
        <div style="font-size:20px;">
            Navigate to the cooking step which asks you to “fry some onions” and start the recipe timer.
        </div>
    </AlertItem>

    @if (isLoading)
    {
        @* Init - Task description and start button *@
        <ButtonContainer>
            <BackButtonControl OnClickCall="GoToIndex" />
            <ButtonControl Name="Start Task" OnBaseClickCall="StartTask" Icon="fas fa-play" Colour="success" />
        </ButtonContainer>
    }
    else
    {
        @* Task content goes here... *@
        <ButtonContainer>
            <BackButtonControl OnClickCall="GoToIndex" />
            <ButtonControl Name="Complete Task" OnBaseClickCall="TaskCompleted" Icon="fas fa-check" Colour="success" />
            <ButtonControl Name="Can't Complete" OnBaseClickCall="FailTask" Icon="fas fa-stop" Colour="danger" />
        </ButtonContainer>
    }
    <Modal />
</PageBase>

@*
    GUID 3: 823bce54-0cf9-40a0-9c5d-53921f743093
    GUID 4: cddd7b74-5596-42b1-b0da-848ed5e78a27
    GUID 5: 0d90d0ad-6212-43a6-8fb8-fd91f6d8221b
    GUID 6: defd8446-7e51-4482-8811-dd627fc64798
*@

@code {
    // We check to see if user has a task record for this task
    protected override async Task OnInitializedAsync()
    {
        // If this task is already complete, navigate to next task
        if (await _api.CheckTaskStatus(taskId, _user.Id))
        {
            await NextTask();
        }
        else
        {
            // Get the taskObj for this user/taskId
            taskObj = await _api.GetActiveTask(taskId, _user.Id);

            await ResetTaskAsync();
        }
        await base.OnInitializedAsync();
    }

    private bool isLoading { get; set; } = true;

    private bool taskStarted { get; set; } = false;

    private bool taskCompleted { get; set; } = false;

    protected int taskId = 3;

    private TaskObj? taskObj = new();

    protected string currentPage = "823bce54-0cf9-40a0-9c5d-53921f743093";

    protected string nextPage = "cddd7b74-5596-42b1-b0da-848ed5e78a27";

    private async Task ResetTaskAsync()
    {
        if (taskObj.Id > 0)
        {
            if (!taskObj.TimeEnded.HasValue && !taskObj.TaskFailed)
            {
                taskObj.TimeStarted = null;
                taskObj.TimeEnded = null;
                taskObj.TaskFailed = false;
                await _api.SaveTaskAsync(taskObj);
            }
        }
    }

    private async void StartTask()
    {
        taskStarted = true;
        DateTime startTime = DateTime.Now;

        if (taskObj?.Id == 0)
        {
            // Create a new task record for this user id
            taskObj = new TaskObj
                {
                    UserId = _user.Id,
                    TaskId = taskId,
                    TimeStarted = startTime
                };
        }
        else
        {
            taskObj.TimeStarted = startTime;
            taskObj.TimeEnded = null;
            taskObj.TaskFailed = false;
        }

        await _api.SaveTaskAsync(taskObj);
        isLoading = false;
        StateHasChanged();
    }

    private async void FailTask()
    {
        if (taskObj.Id > 0)
        {
            if (await JSRuntime.InvokeAsync<bool>(
                "confirm", $"This task will failand you will move to the next task automatically. Confirm?"))
            {
                taskObj.TaskFailed = true;
                await _api.SaveTaskAsync(taskObj);
            }
        }
    }

    private async Task NextTask()
    {
        _nav.NavigateTo("/" + nextPage);
    }

    public async Task TaskCompleted()
    {
        taskObj.TimeEnded = DateTime.Now;
        await _api.SaveTaskAsync(taskObj);
        // Then either give the option to navigate via button
        // or navigate straight to the next task
        System.Diagnostics.Debug.WriteLine("Task completed...");
        taskCompleted = true;
        await NextTask();
    }

    // The following code is to manage page navigation. We want to limit what the user can do
    // when the app is in a scenario
    private IDisposable? locationReg;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            locationReg =
                _nav.RegisterLocationChangingHandler(OnLocationChanging);
        }
    }

    // We need control over where the user can go once the scenario has begun
    private async ValueTask OnLocationChanging(LocationChangingContext context)
    {
        if (context.TargetLocation == "/")
        {
            // we can go back to index regardless, so reset any timers on taskObj if req
            await ResetTaskAsync();
        }
        else
        {
            if (taskCompleted)
            {
                if (context.TargetLocation != "/" + nextPage)
                {
                    context.PreventNavigation();
                }
            }
            else // this is probably surplus to requirements
            {
                bool cancelChange = false;
                // We want to check if the task has begun yet
                if (taskStarted && !await ConfirmPageExit())
                {
                    cancelChange = true;
                }

                if (cancelChange)
                {
                    context.PreventNavigation();
                }
                else
                {
                    // If it hasn't then it doesn't matter
                    if (context.TargetLocation != "/" + currentPage)
                    {
                        context.PreventNavigation();
                    }
                }
            }
        }
        //return ValueTask.CompletedTask;
    }

    private async Task<bool> ConfirmPageExit()
    {
        if (await JSRuntime.InvokeAsync<bool>(
            "confirm", $"If you leave this page now the task will be reset. Is this OK?"))
        {
            return true;
        }
        return false;
    }

    private async void GoToIndex()
    {
        if (await JSRuntime.InvokeAsync<bool>(
            "confirm", $"If you leave this page now, the task will be reset. Is this OK?"))
        {
            _nav.NavigateTo("/");
        }
    }

    public void Dispose() => locationReg?.Dispose();
}
