@page "/cddd7b74-5596-42b1-b0da-848ed5e78a27"
@inject CookCompAPI _api
@inject NavigationManager _nav
@inject PageHistory _page
@inject UserGlobal _user
@implements IDisposable
@inject IJSRuntime JSRuntime;

<PageTitle>Cooking Companion - Task Four</PageTitle>
<PageBase>
    <AlertItem Style="AlertItem.AlertStyle.Warning">
        <div style="font-size:24px;">
            <i class="fas fa-edit fa-fw"></i>
            <b>Task Four</b>
        </div>
        <div style="font-size:20px;">
            Follow the recipe until you're instructed to "chop your mushrooms" then go to the recipe menu.
        </div>
    </AlertItem>

    @if (isLoading)
    {
        @* Init - Task description and start button *@
        <ButtonContainer>
            <BackButtonControl OnClickCall="GoToIndex" />
            <ButtonControl Name="Start Task" OnBaseClickCall="StartTask" Icon="fas fa-play" Colour="success" />
        </ButtonContainer>
    }
    else
    {
        @* Task content goes here... *@
        @* <h5>@TitleName</h5> *@
        <FormBase>
            @if (RecipeObj.Id > 0)
            {
                @* This layout is for smaller screens *@
                <div class="container d-grid d-lg-none">
                    <div class="col-12 row">

                        @* Step header *@
                        @* Landscape *@
                        <div class="col-6 d-none d-sm-block" style="float:left">
                            <img src="@RecipeObj.ImgUrl" class="img-fluid rounded-start" style="float:left; margin-right: 4px; max-width:40%;" />
                            <h6>@TitleName</h6>
                            Step: @RStepObj.StepNumber
                        </div>
                        <div class="col-6 d-none d-sm-block" style="float:right;">
                            <div class="w-shopping-list" style=" background-color:antiquewhite;">
                                <i style="font-size:30px; color:gray; float:right; margin-left: 4px;" class="fas fa-history"></i>
                                <div style="font-size:12px;"><b>@RStepObj.PreviousStep</b></div>
                            </div>
                        </div>

                        @* Portrait *@
                        <div class="col-4 d-block d-sm-none" style="float:left">
                            <img src="@RecipeObj.ImgUrl" class="img-fluid rounded-start" style="float:left; margin-right: 4px;" />
                            <h6>@TitleName</h6>
                            Step: @RStepObj.StepNumber
                        </div>
                        <div class="col-8 d-block d-sm-none" style="float:right;">
                            <div class="w-shopping-list" style=" background-color:antiquewhite;">
                                <i style="font-size:30px; color:gray; float:right; margin-left: 4px;" class="fas fa-history"></i>
                                <div style="font-size:12px;"><b>@RStepObj.PreviousStep</b></div>
                            </div>
                        </div>
                    </div>

                    @* Step Instructions *@
                    <div class="col-12 row pt-4">
                        <div class="col-8">
                            <h5>@Title</h5>
                            <div>@Description</div>
                        </div>
                        <div class="col-4">
                            <img width="200px" src="@RecipeObj.ImgUrl" class="img-fluid rounded-start" />
                        </div>
                    </div>
                </div>

                @* This layout is for larger screens *@
                <div class="container d-none d-lg-grid">
                    <div class="col-12 row">
                        <div class="col-6" style="float:left">
                            <img src="@RecipeObj.ImgUrl" class="img-fluid rounded-start" style="float:left; margin-right: 4px; max-width:35%;" />
                            <h6 style="font-size:25px">@TitleName</h6>
                            <p style="font-size:20px">Step: @RStepObj.StepNumber</p>
                        </div>

                        <div class="col-6 p-4" style="float:right;">
                            <div class=" w-shopping-list" style="background-color:antiquewhite">
                                <i style="font-size:36px; color:grey; float:right; margin-left: 4px;" class="fas fa-history"></i>
                                <div style="font-size:18px;">@RStepObj.PreviousStep</div>
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="col-12 pt-4"><div><h5 style="font-size:25px">@Title</h5></div></div>
                    <div class="col-12 row">
                        <div class="col-8" style="font-size:22px">
                            <div>@Description</div>
                        </div>
                        <div class="col-4">
                            <img width="200px" src="@RecipeObj.ImgUrl" class="img-fluid rounded-start" />
                        </div>
                    </div>
                </div>

            }
            else
            {
                <div>Content is loading...</div>
            }

        </FormBase>
        <div hidden="@IsHidden">
            <button class="timer-button">
                <i class="fas fa-clock pt-1 timer-icon"></i>Start Timer
            </button>
        </div>

        @* Made an adaptation of the ButtonContainer, as it wasn't ordering the buttons as preferred. *@
        <div class="d-none d-sm-grid">
            <div class="btn-group mt-4">
                <PreviousStepButton OnClickCall="PreviousStep" />
                <CookingRecipeButton OnClickCall="PageBack" />
                <NextStepButton OnClickCall="NextStep" />
            </div>
        </div>
        <div class="d-grid d-sm-none">
            <div class="btn-group-vertical mt-4">
                <NextStepButton OnClickCall="NextStep" />
                <PreviousStepButton OnClickCall="PreviousStep" />
                <CookingRecipeButton OnClickCall="PageBack" />
            </div>
        </div>

        /* Additional buttons */
        <ButtonContainer>
            <BackButtonControl OnClickCall="GoToIndex" />
            <ButtonControl Name="Skip Task" OnBaseClickCall="FailTask" Icon="fas fa-circle-xmark" Colour="danger" />
        </ButtonContainer>
    }
</PageBase>

<ModalControl OnClickCall="ConfirmCompleted" HeadStr="Task Four Completed" BodyStr="Please click 'Confirm' to progress to the next task." @ref="@ourModal" />
<ClockTimer ></ClockTimer>

@code {
    // Object References
    ModalControl ourModal { get; set; }

    // Object variables
    public int RecipeId { get; set; }
    private Recipe? RecipeObj { get; set; } = new();
    private List<CookingStep> StepList { get; set; }
    private RecipeStep? RStepObj { get; set; } = new();
    private CookingStep? CStepObj { get; set; } = new();
    private string Title { get; set; } = string.Empty;
    private string Description { get; set; } = string.Empty;
    public bool IsHidden { get; set; } = true;
    public string TitleName { get { return (RecipeObj?.Id < 0) ? "Cooking Companion" : RecipeObj.Name; } }

    private async void PreviousStep()
    {
        if (await CheckPreviousStep())
        {
            CStepObj = StepList.Find(x => x.StepNumber == CStepObj.StepNumber - 1);
            await UpdateRecipeStep();
            StateHasChanged();
        }
    }
    private async void NextStep()
    {
        if (await CheckNextStep())
        {
            CStepObj = StepList.Find(x => x.StepNumber == CStepObj.StepNumber + 1);
            await UpdateRecipeStep();
            StateHasChanged();
        }
    }
    private async Task UpdateRecipeStep()
    {
        RStepObj = await _api.GetRecipeStepUniqueAsync(CStepObj.StepId);
        Title = RStepObj.Title;
        Description = RStepObj.Description;
    }
    private async Task<bool> CheckNextStep()
    {
        if (StepList != null && CStepObj != null)
        {
            if (CStepObj.StepNumber + 1 <= 8)
            {
                return true;
            }
        }
        return false;
    }
    private async Task<bool> CheckPreviousStep()
    {
        if (StepList != null && CStepObj != null && (CStepObj.StepNumber > 1))
        {
            return true;
        }
        return false;
    }

    private async void PageBack()
    {
        if(RStepObj.StepNumber == 6)
        {
            //Task successful
            ourModal.Show();
        }
    }

    // We check to see if user has a task record for this task
    protected override async Task OnInitializedAsync()
    {
        // If this task is already complete, navigate to next task
        if (await _api.CheckTaskStatus(taskId, _user.Id))
        {
            await NextTask();
        }
        else
        {
            // Get the taskObj for this user/taskId
            taskObj = await _api.GetActiveTask(taskId, _user.Id);

            await ResetTaskAsync();

            // Load objects
            RecipeId = 1;
            RecipeObj = await _api.GetRecipeUniqueAsync(RecipeId);
            StepList = await _api.CheckCookingStatus(RecipeId, 0);
            StepList = StepList.OrderBy(b => b.StepNumber).ToList();
            foreach (CookingStep cs in StepList)
            {
                if (!cs.IsCompleted)
                {
                    CStepObj = cs;
                    RStepObj = await _api.GetRecipeStepUniqueAsync(cs.StepId);

                    Title = RStepObj.Title;
                    Description = RStepObj.Description;

                    break;
                }
            }
        }
        await base.OnInitializedAsync();
    }

    private async void ConfirmCompleted()
    {
        ourModal.CloseModal();
        TaskCompleted();
    }

    // Page setup
    private bool isLoading { get; set; } = true;

    private bool taskStarted { get; set; } = false;

    private bool taskCompleted { get; set; } = false;

    protected int taskId = 4;

    private TaskObj? taskObj = new();

    protected string currentPage = "cddd7b74-5596-42b1-b0da-848ed5e78a27";

    protected string nextPage = "0d90d0ad-6212-43a6-8fb8-fd91f6d8221b";

    private async Task ResetTaskAsync()
    {
        if (taskObj.Id > 0)
        {
            if (!taskObj.TimeEnded.HasValue && !taskObj.TaskFailed)
            {
                taskObj.TimeStarted = null;
                taskObj.TimeEnded = null;
                taskObj.TaskFailed = false;
                await _api.SaveTaskAsync(taskObj);
            }
        }
    }

    private async void StartTask()
    {
        taskStarted = true;
        DateTime startTime = DateTime.Now;

        if (taskObj?.Id == 0)
        {
            // Create a new task record for this user id
            taskObj = new TaskObj
                {
                    UserId = _user.Id,
                    TaskId = taskId,
                    TimeStarted = startTime
                };
        }
        else
        {
            taskObj.TimeStarted = startTime;
            taskObj.TimeEnded = null;
            taskObj.TaskFailed = false;
        }

        await _api.SaveTaskAsync(taskObj);
        isLoading = false;
        StateHasChanged();
    }

    private async void FailTask()
    {
        if (taskObj.Id > 0)
        {
            if (await JSRuntime.InvokeAsync<bool>(
                "confirm", $"This task will failand you will move to the next task automatically. Confirm?"))
            {
                taskObj.TaskFailed = true;
                await _api.SaveTaskAsync(taskObj);
            }
        }
    }

    private async Task NextTask()
    {
        Dispose();
        _nav.NavigateTo("/" + nextPage);
    }

    public async Task TaskCompleted()
    {
        taskObj.TimeEnded = DateTime.Now;
        await _api.SaveTaskAsync(taskObj);
        taskCompleted = true;
        await NextTask();
    }

    // The following code is to manage page navigation. We want to limit what the user can do
    // when the app is in a scenario
    private IDisposable? locationReg;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            locationReg =
                _nav.RegisterLocationChangingHandler(OnLocationChanging);
        }
    }

    // We need control over where the user can go once the scenario has begun
    private async ValueTask OnLocationChanging(LocationChangingContext context)
    {
        if (context.TargetLocation == "/")
        {
            // we can go back to index regardless, so reset any timers on taskObj if req
            await ResetTaskAsync();
        }
        else
        {
            if (taskCompleted)
            {
                if (context.TargetLocation != "/" + nextPage)
                {
                    context.PreventNavigation();
                }
            }
            else // this is probably surplus to requirements
            {
                bool cancelChange = false;
                // We want to check if the task has begun yet
                if (taskStarted && !await ConfirmPageExit())
                {
                    cancelChange = true;
                }

                if (cancelChange)
                {
                    context.PreventNavigation();
                }
                else
                {
                    // If it hasn't then it doesn't matter
                    if (context.TargetLocation != "/" + currentPage)
                    {
                        context.PreventNavigation();
                    }
                }
            }
        }
        //return ValueTask.CompletedTask;
    }

    private async Task<bool> ConfirmPageExit()
    {
        if (await JSRuntime.InvokeAsync<bool>(
            "confirm", $"If you leave this page now the task will be reset. Is this OK?"))
        {
            return true;
        }
        return false;
    }

    private async void GoToIndex()
    {
        if (await JSRuntime.InvokeAsync<bool>(
            "confirm", $"If you leave this page now, the task will be reset. Is this OK?"))
        {
            _nav.NavigateTo("/");
        }
    }

    public void Dispose() => locationReg?.Dispose();
}
