@page "/defd8446-7e51-4482-8811-dd627fc64798"
@inject CookCompAPI _api
@inject NavigationManager _nav
@inject PageHistory _page
@inject UserGlobal _user
@inject ILocalStorageService _ls;
@inject IJSRuntime JSRuntime;

<PageTitle>Cooking Companion - Task Six</PageTitle>
<PageBase>
    <AlertItem Style="AlertItem.AlertStyle.Warning">
        <div style="font-size:24px;">
            <i class="fas fa-edit fa-fw"></i>
            <b>Task Six</b>
        </div>
        <div style="font-size:20px;">
            Open the main menu using the burger button.
        </div>
    </AlertItem>

    @if (isLoading)
    {
        @* Init - Task description and start button *@
        <ButtonContainer>
            <BackButtonControl OnClickCall="GoToIndex" />
            <ButtonControl Name="Start Task" OnBaseClickCall="StartTask" Icon="fas fa-play" Colour="success" />
        </ButtonContainer>
    }
    else
    {
        @if (parent.menuClicked)
        {
            <ButtonContainer>
                <ButtonControl Name="Complete" OnBaseClickCall="CompleteTask" Icon="fas fa-check" Colour="success" />
            </ButtonContainer>
        }
        else
        {
            @* Task content goes here... *@
            <ButtonContainer>
            <BackButtonControl OnClickCall="GoToIndex" />
            <ButtonControl Name="Skip Task" OnBaseClickCall="FailTask" Icon="fas fa-stop" Colour="danger" />
        </ButtonContainer>
        }
    }
</PageBase>
<ModalControl OnClickCall="ConfirmCompleted" HeadStr="Task Six Completed" BodyStr="Please click 'Confirm' to progress to the next task." @ref="@ourModal" />

@code {
    [CascadingParameter]
    protected MainLayout parent { get; set; }

    // Object References
    ModalControl ourModal { get; set; }

    // We check to see if user has a task record for this task
    protected override async Task OnInitializedAsync()
    {
        // If this task is already complete, navigate to next task
        if (await _api.CheckTaskStatus(taskId, _user.Id))
        {
            await NextTask();
        }
        else
        {
            // Get the taskObj for this user/taskId
            taskObj = await _api.GetActiveTask(taskId, _user.Id);

            await ResetTaskAsync();
            //await JSRuntime.InvokeVoidAsync("addEventListener", "click", DotNetObjectReference.Create(this).Value, "DocClick");
        }
        await base.OnInitializedAsync();
    }

    private bool isLoading { get; set; } = true;

    private bool taskStarted { get; set; } = false;

    private bool taskCompleted { get; set; } = false;

    protected int taskId = 6;

    private TaskObj? taskObj = new();

    protected string currentPage = "defd8446-7e51-4482-8811-dd627fc64798";

    protected string nextPage = "b813df99-af96-417b-9a14-a72626b958e8";

    private async Task ResetTaskAsync()
    {
        if (taskObj.Id > 0)
        {
            if (!taskObj.TimeEnded.HasValue && !taskObj.TaskFailed)
            {
                taskObj.TimeStarted = null;
                taskObj.TimeEnded = null;
                taskObj.TaskFailed = false;
                await _api.SaveTaskAsync(taskObj);
            }
        }
    }

    private async void CompleteTask()
    {
        ourModal.OpenModal();
    }

    private async void ConfirmCompleted()
    {
        ourModal.CloseModal();
        TaskCompleted();
    }

    private async void StartTask()
    {
        taskStarted = true;
        DateTime startTime = DateTime.Now;

        if (taskObj?.Id == 0)
        {
            // Create a new task record for this user id
            taskObj = new TaskObj
                {
                    UserId = _user.Id,
                    TaskId = taskId,
                    TimeStarted = startTime
                };
        }
        else
        {
            taskObj.TimeStarted = startTime;
            taskObj.TimeEnded = null;
            taskObj.TaskFailed = false;
        }

        await _api.SaveTaskAsync(taskObj);
        isLoading = false;

        var dnRef = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("RPCC.clickListener", dnRef);

        StateHasChanged();
    }

    // [JSInvokable]
    // public void DocClick()
    // {
    //     
    // }

    private async void FailTask()
    {
        if (taskObj.Id > 0)
        {
            if (await JSRuntime.InvokeAsync<bool>(
                "confirm", $"This task will fail and you will move to the next task automatically. Confirm?"))
            {
                taskObj.TaskFailed = true;
                await _api.SaveTaskAsync(taskObj);
            }
        }
    }

    private async Task NextTask()
    {
        Dispose();
        _nav.NavigateTo("/" + nextPage);
    }

    public async Task TaskCompleted()
    {
        taskObj.TimeEnded = DateTime.Now;
        taskObj.ClickCount = pageClicks;
        await _api.SaveTaskAsync(taskObj);
        taskCompleted = true;
        await AllTasksCompleted();
        await NextTask();
    }


    // This will be used when the user has completed all tasks
    public async Task AllTasksCompleted()
    {
        string lsu = "";
        try
        {
            lsu = await _ls.GetItemAsStringAsync("uls");
            Guid guid = Guid.Parse(lsu);

            if (guid != Guid.Empty)
            {
                User? getUser = await _api.GetUser(guid);
                _user.SetTaskComplete(true);
                _user.UpdateUserTaskStatus(getUser);
                await _api.SaveUserAsync(getUser);
            }
        }
        catch { }
    }

    // The following code is to manage page navigation. We want to limit what the user can do
    // when the app is in a scenario
    private IDisposable? locationReg;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            locationReg =
                _nav.RegisterLocationChangingHandler(OnLocationChanging);
        }
    }

    // We need control over where the user can go once the scenario has begun
    private async ValueTask OnLocationChanging(LocationChangingContext context)
    {
        if (context.TargetLocation == "/")
        {
            // we can go back to index regardless, so reset any timers on taskObj if req
            await ResetTaskAsync();
            await _api.SaveTaskAsync(taskObj);
        }
        else
        {
            if (taskCompleted)
            {
                if (context.TargetLocation != "/" + nextPage)
                {
                    context.PreventNavigation();
                }
            }
            else // this is probably surplus to requirements
            {
                bool cancelChange = false;
                // We want to check if the task has begun yet
                if (taskStarted && !await ConfirmPageExit())
                {
                    cancelChange = true;
                }

                if (cancelChange)
                {
                    context.PreventNavigation();
                }
                else
                {
                    // If it hasn't then it doesn't matter
                    if (context.TargetLocation != "/" + currentPage)
                    {
                        context.PreventNavigation();
                    }
                }
            }
        }
        //return ValueTask.CompletedTask;
    }

    private async Task<bool> ConfirmPageExit()
    {
        if (await JSRuntime.InvokeAsync<bool>(
            "confirm", $"If you leave this page now the task will be reset. Is this OK?"))
        {
            Dispose();
            return true;
        }
        return false;
    }

    private async void GoToIndex()
    {
        if (await JSRuntime.InvokeAsync<bool>(
            "confirm", $"If you leave this page now, the task will be reset. Is this OK?"))
        {
            _nav.NavigateTo("/");
            Dispose();
        }
    }

    public void Dispose() => locationReg?.Dispose();

    // On Click Tracking
    @implements IAsyncDisposable
    private int pageClicks { get; set; }

    [JSInvokable]
    public void TriggerClick()
    {
        pageClicks++;
        //_api.Output("Task 6 Clicks: " + pageClicks);
    }

    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("RPCC.removeEventListener");
    }
}
