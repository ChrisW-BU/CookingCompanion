@inherits LayoutComponentBase
@inject CookCompAPI _api
@inject UserGlobal _user;
@inject NavigationManager _nav;
@inject PageHistory _page;
@inject ILocalStorageService _ls;

<CascadingValue Value="this">
    <div class="page">
        <main>
            <div class="top-row px-4">
                <div class="user-select-none">
                    @titleStr &nbsp @if (_user.LoggedIn)
                    {
                        <div style="display:inline" @onclick="LogOut">
                            <i class="fas fa-right-from-bracket"></i>
                            <span>Log Out</span>
                        </div>
                    }
                </div>
                <div class="user-select-none" style="display:flex; align-items:center">
                    @if (_user.LoggedIn && _user.GetTaskComplete())
                    {
                        <button class="navbar-toggler" type="button" title="Navigation" data-bs-toggle="offcanvas"
                                data-bs-target="#offcanvasMenu" aria-controls="offcanvasMenu">
                            <span class="fas fa-bars"></span>
                        </button>
                    }
                    &nbsp
                    <span class="d-none d-sm-block">Cooking Companion</span>
                </div>
            </div>

            @* Offcanvas *@
            <div class="offcanvas offcanvas-start" tabindex="-1" id="offcanvasMenu" aria-labelledby="offcanvasMenuLabel">
                <div class="offcanvas-header top-row mb-3">
                    <h4 class="offcanvas-title" id="offcanvasMenuLabel">Menu</h4>
                    <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                </div>
                <div class="offcanvas-body">
                    <div class="grid gap-3">
                        @if (_user.IsAdmin)
                        {
                            <MenuItem IsOffCanvas=true Icon="fas fa-tools" Title="Admin Panel" Href="admin"></MenuItem>
                        }
                        @if (_user.GetTaskComplete())
                        {
                            <MenuItem IsOffCanvas=true Icon="fas fa-burger" Title="Recipes" Href="recipes"></MenuItem>
                            <MenuItem IsOffCanvas=true Icon="fas fa-list-check" Title="Shopping Lists" Href="shoppinglist"></MenuItem>
                            <MenuItem IsOffCanvas=true Icon="fas fa-star" Title="Favourites" Href="favourites"></MenuItem>
                        }
                    </div>
                </div>
            </div>

            <div class="@loginCSS">
                <LoginForm @ref="@loginObj" OnSuccessCallBack="SuccessfulCallBack" />
            </div>
            @if (_user.LoggedIn)
            {
                <div class="@bodyCSS" style="user-select:none">
                    <article class="content px-3">
                        @Body
                    </article>
                </div>
            }

        </main>
    </div>
</CascadingValue>

@code {
    string loginCSS = "";
    string bodyCSS = "d-none";
    private LoginForm loginObj = new();
    string titleStr = "";

    protected override async Task OnInitializedAsync()
    {
        await CheckLoggedInUser();
    }

    public async Task CheckLoggedInUser()
    {
        // Check local storage for user
        string lsu = "";
        try
        {
            lsu = await _ls.GetItemAsStringAsync("uls");
            Guid guid = Guid.Parse(lsu);

            if (guid != Guid.Empty)
            {
                User? getUser = await _api.GetUser(guid);
                _user.SetUserInfo(getUser);
            }
        }
        catch { }

        if (_user.LoggedIn)
        {
            bodyCSS = "d-block";
            titleStr = "Welcome, " + _user.UserName + ". ";
            loginCSS = "d-none";
        }
        else
        {
            bodyCSS = "d-none";
            titleStr = "";
            loginCSS = "d-block";
        }
        StateHasChanged();
    }

    public void SuccessfulCallBack()
    {
        if (_user.LoggedIn && _user.UserName.Length > 0)
        {
            bodyCSS = "d-block";
            titleStr = "Welcome " + _user.UserName;
            loginCSS = "d-none";
        }
        else
        {
            bodyCSS = "d-none";
            titleStr = "";
            loginCSS = "d-block";
        }
        Refresh();
        StateHasChanged();
        _nav.NavigateTo("/", false);
    }

    public void GoToMenu()
    {
        if (_user.LoggedIn && _user.UserName.Length > 0)
        {
            if (_page.IsPrevious())
            {
                _nav.NavigateTo(_page.GetPreviousPage());
            }
            else
            {
                _page.AddPage(_nav.BaseUri);
                _nav.NavigateTo("/");
            }
        }
    }

    public void Refresh()
    {
        // Hacky, but achieves the component refresh we need.
        //_nav.NavigateTo("api/cc");
    }

    public void LogOut()
    {
        _user.ResetUserInfo();
        _ls.RemoveItemAsync("uls");
        _nav.NavigateTo("/", true);
    }
}